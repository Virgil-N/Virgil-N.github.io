<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog on einer schönen Tag</title>
    <link>https://virgil-n.github.io/zh/blog/</link>
    <description>Recent content in Blog on einer schönen Tag</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Wed, 22 Nov 2023 11:33:28 +0800</lastBuildDate><atom:link href="https://virgil-n.github.io/zh/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>22.11.2023</title>
      <link>https://virgil-n.github.io/zh/blog/22.11.2023/</link>
      <pubDate>Wed, 22 Nov 2023 11:33:28 +0800</pubDate>
      
      <guid>https://virgil-n.github.io/zh/blog/22.11.2023/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Egui浅尝</title>
      <link>https://virgil-n.github.io/zh/blog/egui%E6%B5%85%E5%B0%9D/</link>
      <pubDate>Sun, 11 Dec 2022 22:27:04 +0800</pubDate>
      
      <guid>https://virgil-n.github.io/zh/blog/egui%E6%B5%85%E5%B0%9D/</guid>
      <description>最近因为某些原因在家🙄，闲时尝试了下egui这个库。感觉是蛮简单的。</description>
    </item>
    
    <item>
      <title>Rust学习之cfg宏</title>
      <link>https://virgil-n.github.io/zh/blog/rust%E5%AD%A6%E4%B9%A0%E4%B9%8Bcfg%E5%AE%8F/</link>
      <pubDate>Fri, 02 Dec 2022 17:41:03 +0800</pubDate>
      
      <guid>https://virgil-n.github.io/zh/blog/rust%E5%AD%A6%E4%B9%A0%E4%B9%8Bcfg%E5%AE%8F/</guid>
      <description>我们可以使用cfg!宏来告诉编译器当前的配置条件。常用的有：
键值对类型：target_os、target_arch、target_env、target_family、target_vendor、target_endian、feature等。
单项类型：test、debug_assertions
此外，也可以在属性中使用cfg，比如：#[cfg(test)]、#[cfg(windows)]等。还可以使用#[cfg_attr(predicate, attr)]。
eg:
let cfg_test = if cfg!(target_os = &amp;#34;macos&amp;#34;) { String::from(&amp;#34;mac&amp;#34;) } else { String::from(&amp;#34;else&amp;#34;) }; println!(&amp;#34;{}&amp;#34;, cfg_test); // mac #[cfg(test)] mod test_mod { #[test] fn just_test() { if cfg!(test) { assert_eq!(1, 1); } else { println!(&amp;#34;...&amp;#34;); } } } </description>
    </item>
    
    <item>
      <title>Rust学习之基础部分1</title>
      <link>https://virgil-n.github.io/zh/blog/rust%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%861/</link>
      <pubDate>Thu, 01 Dec 2022 12:35:02 +0800</pubDate>
      
      <guid>https://virgil-n.github.io/zh/blog/rust%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%861/</guid>
      <description>Rust查找candidate receiver type的顺序：
| T
&amp;amp;T
&amp;amp;mut T
*T
&amp;amp;*T
&amp;amp;mut *T
coercion to U
&amp;amp;U
&amp;amp;mut U</description>
    </item>
    
    <item>
      <title>Rust学习之方法整理</title>
      <link>https://virgil-n.github.io/zh/blog/rust%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%96%B9%E6%B3%95%E6%95%B4%E7%90%86/</link>
      <pubDate>Sat, 26 Nov 2022 22:55:08 +0800</pubDate>
      
      <guid>https://virgil-n.github.io/zh/blog/rust%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%96%B9%E6%B3%95%E6%95%B4%E7%90%86/</guid>
      <description>Option /// 1 pub fn ok_or&amp;lt;E&amp;gt;(self, err: E) -&amp;gt; Result&amp;lt;T, E&amp;gt; pub fn ok_or_else&amp;lt;E, F&amp;gt;(self, err: F) -&amp;gt; Result&amp;lt;T, E&amp;gt; where F: FnOnce() -&amp;gt; E /// 2 pub fn unwrap(self) -&amp;gt; T pub fn unwrap_or(self, default: T) -&amp;gt; T pub fn unwrap_or_else&amp;lt;F&amp;gt;(self, f: F) -&amp;gt; T where F: FnOnce() -&amp;gt; T pub fn unwrap_or_default(self) -&amp;gt; T where T: Default pub unsafe fn unwrap_unchecked(self) -&amp;gt; T /// 3 pub fn and&amp;lt;U&amp;gt;(self, optb: Option&amp;lt;U&amp;gt;) -&amp;gt; Option&amp;lt;U&amp;gt; pub fn and_then&amp;lt;U, F&amp;gt;(self, f: F) -&amp;gt; Option&amp;lt;U&amp;gt; where F: FnOnce(T) -&amp;gt; Option&amp;lt;U&amp;gt; /// 4 pub fn copied(self) -&amp;gt; Option&amp;lt;T&amp;gt; where T: Copy pub fn cloned(self) -&amp;gt; Option&amp;lt;T&amp;gt; where T: Clone Result&amp;lt;T, E&amp;gt; /// 1 pub fn ok(self) -&amp;gt; Option&amp;lt;T&amp;gt; pub fn err(self) -&amp;gt; Option&amp;lt;E&amp;gt; /// 2 pub fn unwrap(self) -&amp;gt; T where E: Debug pub fn unwrap_or(self, default: T) -&amp;gt; T pub fn unwrap_or_else&amp;lt;F&amp;gt;(self, op: F) -&amp;gt; T where F: FnOnce(E) -&amp;gt; T pub fn unwrap_or_default(self) -&amp;gt; T where T: Default pub unsafe fn unwrap_unchecked(self) -&amp;gt; T pub fn unwrap_err(self) -&amp;gt; E where T: Debug pub unsafe fn unwrap_err_unchecked(self) -&amp;gt; E /// 3 pub fn and&amp;lt;U&amp;gt;(self, res: Result&amp;lt;U, E&amp;gt;) -&amp;gt; Result&amp;lt;U, E&amp;gt; pub fn and_then&amp;lt;U, F&amp;gt;(self, op: F) -&amp;gt; Result&amp;lt;U, E&amp;gt; where F: FnOnce(T) -&amp;gt; Result&amp;lt;U, E&amp;gt; /// 4 pub fn copied(self) -&amp;gt; Result&amp;lt;T, E&amp;gt; where T: Copy pub fn cloned(self) -&amp;gt; Result&amp;lt;T, E&amp;gt; where T: Clone (持续更新)</description>
    </item>
    
    <item>
      <title>Rust学习之迭代器</title>
      <link>https://virgil-n.github.io/zh/blog/rust%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%BF%AD%E4%BB%A3%E5%99%A8/</link>
      <pubDate>Sat, 26 Nov 2022 15:28:59 +0800</pubDate>
      
      <guid>https://virgil-n.github.io/zh/blog/rust%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%BF%AD%E4%BB%A3%E5%99%A8/</guid>
      <description>Rust迭代器的使用在日常开发中是很基础和重要的，现在了解下迭代器的使用。
我们获取迭代器有以下几种方法：
.iter()返回一个迭代器，包含类型的引用 .iter_mut()返回一个迭代器，包含类型的可变引用 .into_iter()返回一个包含类型值的迭代器 迭代器的实现：只需要实现Trait std::iter::Iterator这个trait就行了，不多说了。
迭代器一般会配合一些集合操作方法，比如rev()，map()，fold()等，学会组合使用会展现出强大的威力。并且相比较for in，loop等循环，迭代器是惰性的，对性能有一定优化。
注意.into_iter()在receiver为引用的情况下会依情况调用.iter()或.inter_mut()方法。观察以下代码：
// block 1 // 我们都清楚.into_iter()方法是会转移所有权的，因此下面打印报错在意料之中 let v1 = vec![1, 2, 3]; let i1 = v1.into_iter(); println!(&amp;#34;{:?}, {:?}&amp;#34;, v1, i1); // borrow of moved value: `v1` // block 2 // 有没有一点吃惊😱 let v1 = vec![1, 2, 3]; let i1 = (&amp;amp;v1).into_iter(); println!(&amp;#34;{:?}, {:?}&amp;#34;, v1, i1); // [1, 2, 3] // 或者 let v1 = &amp;amp;vec![1, 2, 3]; let i1 = v1.into_iter(); println!</description>
    </item>
    
    <item>
      <title>一些想法1</title>
      <link>https://virgil-n.github.io/zh/blog/%E4%B8%80%E4%BA%9B%E6%83%B3%E6%B3%951/</link>
      <pubDate>Thu, 10 Nov 2022 20:58:35 +0800</pubDate>
      
      <guid>https://virgil-n.github.io/zh/blog/%E4%B8%80%E4%BA%9B%E6%83%B3%E6%B3%951/</guid>
      <description>其实我觉得，一个文明衰败的主要原因在人。别说什么制度、文化。这些都是人可以改变的。 在极度高压的社会中，某类人的存活率是普通人的数倍。 “文明”余孽。 人类只有不断反抗压迫更新制度弊端才能维持现状或者得到进步，否则一切归于熵增定律。</description>
    </item>
    
    <item>
      <title>Rust学习之注释</title>
      <link>https://virgil-n.github.io/zh/blog/rust%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%B3%A8%E9%87%8A/</link>
      <pubDate>Tue, 11 Oct 2022 21:34:09 +0800</pubDate>
      
      <guid>https://virgil-n.github.io/zh/blog/rust%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%B3%A8%E9%87%8A/</guid>
      <description>rust注释学习。
普通注释
// 单行注释 /* */ 多行注释 文档注释
/// 单行外部文档注释 /** */ 多行外部文档注释 //! 单行内部文档注释 /*! */ 多行内部文档注释 外部文档注释一般写在代码块前面，内部文档注意一般写在代码块内部。
注意: crate注释必须使用内部文档注释
普通注释 外部文档注释 内部文档注释 // /// //! /**/ /** */ /!/ </description>
    </item>
    
    <item>
      <title>权谋</title>
      <link>https://virgil-n.github.io/zh/blog/%E6%9D%83%E8%B0%8B/</link>
      <pubDate>Wed, 13 Jul 2022 12:47:57 +0800</pubDate>
      
      <guid>https://virgil-n.github.io/zh/blog/%E6%9D%83%E8%B0%8B/</guid>
      <description>部门领导，WC真不是个人，让能力低下的人坐上高职位去管能力强的，呵呵，既可以消除威胁又可以让团队内斗，自己坐收渔利。还打压能力强的人，给替自己拿刀子的人长威风，助长一股邪恶的白色恐怖气氛，让所有人都顺从他，还TM超级擅长洗脑，个mmp。
在谈话中故意引入某件事物或人，将你带入一个设置好的语境中，混淆你的语义，从中故意曲解你的表达意思，引诱你对此进行解释，从你解释的话语中获取信息，还能将你的注意力引入到此议题上，造成谈话真正主题的空洞。 </description>
    </item>
    
    <item>
      <title>Rust学习之异步2</title>
      <link>https://virgil-n.github.io/zh/blog/rust%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%BC%82%E6%AD%A52/</link>
      <pubDate>Mon, 11 Jul 2022 13:56:27 +0800</pubDate>
      
      <guid>https://virgil-n.github.io/zh/blog/rust%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%BC%82%E6%AD%A52/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Rust学习之异步1</title>
      <link>https://virgil-n.github.io/zh/blog/rust%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%BC%82%E6%AD%A51/</link>
      <pubDate>Mon, 11 Jul 2022 11:25:36 +0800</pubDate>
      
      <guid>https://virgil-n.github.io/zh/blog/rust%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%BC%82%E6%AD%A51/</guid>
      <description>rust异步机制学习。
tokio的线程必须在runtime中运行。 公用代码
use chrono::Local; pub fn now() -&amp;gt; String { Local::now().format(&amp;#34;%F %T&amp;#34;).to_string() } 案例代码
fn main() { println!(&amp;#34;system here&amp;#34;); // rust的线程正常运行 std::thread::spawn(|| { std::thread::sleep(std::time::Duration::from_secs(1)); println!(&amp;#34;thread out block_on: {}&amp;#34;, now()); }); // 报错，只能在tokio的runtime中运行 // tokio::spawn(async { // std::thread::sleep(std::time::Duration::from_secs(1)); // println!(&amp;#34;thread out block_on: {}&amp;#34;, now()); // }); std::thread::sleep(std::time::Duration::from_secs(3)); println!(&amp;#34;system ended: {}&amp;#34;, Local::now().format(&amp;#34;%F %T .%3f&amp;#34;)); } 运行结果(注意打印时间间隔为2秒):
system here
thread out block_on: 2022-07-11 12:40:54
system ended: 2022-07-11 12:40:56 .478
block_on是阻塞的，而enter是非阻塞的(注意查看以下四段代码的运行结果)。 fn main() { let rt1 = tokio::runtime::Runtime::new().</description>
    </item>
    
    <item>
      <title>Rust学习之字符串</title>
      <link>https://virgil-n.github.io/zh/blog/rust%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%AD%97%E7%AC%A6%E4%B8%B2/</link>
      <pubDate>Tue, 31 May 2022 14:55:57 +0800</pubDate>
      
      <guid>https://virgil-n.github.io/zh/blog/rust%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid>
      <description>今天学习rust字符串的push_str方法时发现了一个隐藏的隐患:
先声明一个&amp;amp;str类型不可变变量 调用此变量的to_string方法并后续直接调用push_str方法 打印此变量 发现变量的值未发生变化，这不是我们想要的， 其实不是这样的，因为to_string方法返回了一个新的String类型，他才是push_str方法的调用者，而s没有发生任何变化，所以最后我们打印的还是“美国”，而且从声明变量时没有加mut而编译器未报错就可以看出，s的值并没有改变。
let s = &amp;#34;美国&amp;#34;; s.to_string().push_str(&amp;#34;众神&amp;#34;); println!(&amp;#34;{}&amp;#34;, s); // 美国 中间声明一个可变变量，然后再调用push_str方法
let s = &amp;#34;德国&amp;#34;; let mut s2 = s.to_string(); s2.push_str(&amp;#34;希特勒&amp;#34;); println!(&amp;#34;s2: {}&amp;#34;, s2); // 德国希特勒 啊，过了几天再看自己之前写的这篇文章，感觉好low啊！😂
rust中切片是大小不确定的，无法直接使用，但是切片引用是大小固定的，可以使用。
切片 切片饮用 str &amp;amp;str [..] &amp;amp;[..] 切片&amp;amp;str虽然可以安全使用，但是，我们很难动态修改其内容 —— 其地址、长度都是固定的。于是 rust 提供了数据类型String。
String包含了数据指针、数组容量、数据长度等三个字段。如果新修改的数据长度在其容量范围内，数据可以原地修改。如果新修改的数据长度超出了容量范围，它可以重新申请更大的内存。
于是我们看到，String和&amp;amp;str是两个完全不一样的结构体。为什么字符串要保留这两种形式？原因就是效率。rust希望在数组容量不会变化的时候，用&amp;amp;str。在数组长度可能发生变化的情况下，使用 String。</description>
    </item>
    
    <item>
      <title>垃圾分类</title>
      <link>https://virgil-n.github.io/zh/blog/%E5%9E%83%E5%9C%BE%E5%88%86%E7%B1%BB/</link>
      <pubDate>Sun, 29 May 2022 12:47:34 +0800</pubDate>
      
      <guid>https://virgil-n.github.io/zh/blog/%E5%9E%83%E5%9C%BE%E5%88%86%E7%B1%BB/</guid>
      <description>声明!!!
希望每个认识到这种 Local PUA 的人都要积极面对，不要卷入无休止的争论和谩骂中，更不要无端伤害其他人。你的时间很珍贵也是独一无二的，一起积极开心面对这个世界^_^!
用积极良性的竞争来应对挑战!
使用这些方法的“人”是对这种语言的侮辱，请不要修炼“九阴真经”，避免走火入魔！
在参加工作后，我发现了更多的这些打击别人的词汇，一些教育程度比较低的人会接受一些老年人的讲法（是否是这些老人的讲法无法考证），称这些话语为“打电话”，但其实，“暗示”、“精神打压”、“侮辱”、“挑衅”、“辱骂”是它的专业术语。
动词篇
“拎”，“搞”，“弄”，“盘”，“开”，“啥”，“chi(吃/痴)”，“差”，“切”，“分”，“整”，“打包”，“摘”，“掰”等。
代词篇
没啥好说的，其实就是省略无关字词+谐音(“表格”省略“格”后与“婊”同音)，食物(豆浆，烧饼，混沌)(此项一般根据人的长相等来“贴标签”，“贴标签”在后面会有介绍)。
语法篇
高级版：未接触 低级版： ）混淆指代(经常用于转移矛盾，暂时缓解与对话人的对立状态或尬尴氛围)
例如： “给&amp;rsquo;他&amp;rsquo;了”、“XX&amp;rsquo;她&amp;rsquo;了”、“那^个”。 ）不良谐音(尽量往贬义及消极不好的字词靠)
例如： “A：我还用了那个Bing(病)”(场景：甲乙两人在讨论A，B计划)(实际正常语句应该是：甲：“我还用了那个B(计划)”)。 ）不匹配组合+省略无关字词
例如： “” 原谅本人想象力贫瘠，暂时想不出也记不起来这种句式。 ）隐含指代(故意隐去人称代词)
例如： “他要的是红色的”(此句隐去“红色的”后面的代词，不同的人会自动填充自己认为的代词，此句对于有相同经历或者认识的人很适用，因为说此话的人知道听到此话的人联想到的内容)。 ）故意停顿(讲到关键词句，故意停顿)
例如： “但是这个(停顿)”(此句其实和上一条隐含指代类似)。 声调篇
声调疑问句(伤害性不高，侮辱性极强)
例如： “是你么´？”，“做了么´？”。
声音篇
）故意挑衅 例如：走近某人，当他面或者在比较敏感的方位打响指。 ）“他们”所谓的“测试” 例如：“他们”会故意发出“ci~ci~”或者“si~si~”的声音，甚至增高频率达到扰人的程度。 文章篇
）文末刷新
例如： 和别人对话，讲了很多打击或者伤害别人的话，最后客客气气地和别人讲一句收尾(伤害性高，侮辱性高，迷惑性高，一般在服务场所比较常见)。 ）间隔反转
例如： 间隔一段时间，通常是几小时或几天，对人采取截然相反的态度对话，扰乱当事人的判断(和俗话“打一巴掌，给一颗糖”有异曲同工之处，伤害性高，侮辱性高，迷惑性极高)。 情景篇
）马戏团之猴子扔香蕉
例如： 情景篇难以举例，自行体会(注意点：香蕉千万不能接，如果接了就必须立刻吃掉)。 ）马戏团之黏黏球
例如： 此情况可发生在你未接香蕉或者把香蕉直接吃掉的情况，也可能发生在对方的污蔑或诽谤未成功的情况下，对方为了掩饰自己的行为或其他而继续进行尝试，对方会尝试使用不同的方式和“证词”进行死缠烂打。 ）口是心非
例如： 对方清楚地表示会给你资源或支持你或不会找你麻烦，但是实际上却什么也不给你也不给予支持或老是给你制造麻烦混乱。 其他
贴标签
例如： “她这个表”、“你的是这个包啊(是不是觉得很好笑，很多句式在当时的语境下根本就不是一个正常的语句)”。
其实我发现这种pua什么地方都有，但是更多的来自于北方，而且有部分人还非常擅于此术，但是在此声明下，本人此刻还不是一个有地域歧视的人，只是不清楚以后会不会对此看法有所转变，毕竟人、事都在不停的变化和影响。为什么说北方人更多呢，因为通过身边的人，以及遇到的一些人，他们的遭遇，和我个人工作后的一些经历，切身体会到这一点，而且在生活中对此也有所耳闻。但是我发现并不是所有北方人都这么热衷pua，其中有部分说着类似口音的那群人是很“精明”的，他们也深谙此道，互为内应，结团整人，对此我很不认可。因为：工作上有分歧可以协商、委托第三方调解等多种方式；工作上竞争也应该以正当的方式进行；两人间无论有无过节，都不应在办公场合相互打击对方，尤其是那种下手就不停手的。让人实在看不过眼。至于这类人是哪里出来的，我就不清楚了，毕竟我从来没有去过北方。 我发现，他们会说出一些负面或者说不好的词语或者描述一个不好的场景，让对方听到，测试对方对此的反应。如果对方没有对此表现出愤怒、悲伤、难过等负面情绪，他们就会使用其他词语或场景循环下去，直到找到为止，这时他们已经知道你的软肋了，不要指望他们会停止那种作为一个成年人缺毫无素养的行为，他们会以此为把柄不停地刺激你，惹恼你，直至你崩溃。 我不清楚这些人的成长环境，但不难看出很“复杂”吧，他们也许是从自己的亲身经历又或者自己的父辈、母辈甚至祖辈那里获得了这一习性，而且这种恶习传播速度很快，也很能影响其他人，将其同化成和他们一样有着这种恶习的人，像病毒一样疯狂传播，也疯狂地肆虐着。 (此文章会持续更新&amp;hellip;)</description>
    </item>
    
  </channel>
</rss>
