<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>在地球</title>
    <link>https://virgil-n.github.io/zh/</link>
    <description>Recent content on 在地球</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Mon, 11 Jul 2022 13:56:27 +0800</lastBuildDate><atom:link href="https://virgil-n.github.io/zh/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Rust异步学习2</title>
      <link>https://virgil-n.github.io/zh/blog/rust%E5%BC%82%E6%AD%A5%E5%AD%A6%E4%B9%A02/</link>
      <pubDate>Mon, 11 Jul 2022 13:56:27 +0800</pubDate>
      
      <guid>https://virgil-n.github.io/zh/blog/rust%E5%BC%82%E6%AD%A5%E5%AD%A6%E4%B9%A02/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Rust异步学习1</title>
      <link>https://virgil-n.github.io/zh/blog/rust%E5%BC%82%E6%AD%A5%E5%AD%A6%E4%B9%A01/</link>
      <pubDate>Mon, 11 Jul 2022 11:25:36 +0800</pubDate>
      
      <guid>https://virgil-n.github.io/zh/blog/rust%E5%BC%82%E6%AD%A5%E5%AD%A6%E4%B9%A01/</guid>
      <description>rust异步机制学习。
 tokio的线程必须在runtime中运行  公用代码
use chrono::Local;  pub fn now() -&amp;gt; String {  Local::now().format(&amp;#34;%F %T&amp;#34;).to_string() } 案例代码
fn main() {  println!(&amp;#34;system here&amp;#34;);  // rust的线程正常运行  std::thread::spawn(|| {  std::thread::sleep(std::time::Duration::from_secs(1));  println!(&amp;#34;thread out block_on: {}&amp;#34;, now());  });   // 报错，只能在tokio的runtime中运行  // tokio::spawn(async {  // std::thread::sleep(std::time::Duration::from_secs(1));  // println!(&amp;#34;thread out block_on: {}&amp;#34;, now());  // });   std::thread::sleep(std::time::Duration::from_secs(3));  println!(&amp;#34;system ended: {}&amp;#34;, Local::now().format(&amp;#34;%F %T .</description>
    </item>
    
    <item>
      <title>Rust学习之字符串</title>
      <link>https://virgil-n.github.io/zh/blog/rust%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%AD%97%E7%AC%A6%E4%B8%B2/</link>
      <pubDate>Tue, 31 May 2022 14:55:57 +0800</pubDate>
      
      <guid>https://virgil-n.github.io/zh/blog/rust%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid>
      <description>今天学习rust字符串的push_str方法时发现了一个隐藏的隐患:
 先声明一个&amp;amp;str类型不可变变量 调用此变量的to_string方法并后续直接调用push_str方法 打印此变量  发现变量的值未发生变化，这不是我们想要的
let s = &amp;#34;美国&amp;#34;; s.to_string().push_str(&amp;#34;众神&amp;#34;); println!(&amp;#34;{}&amp;#34;, s); // 美国 这是一个隐藏的问题，对此我目前想到的方法时中间声明一个可变变量，然后再调用push_str方法
let s = &amp;#34;德国&amp;#34;; let mut s2 = s.to_string(); s2.push_str(&amp;#34;希特勒&amp;#34;); println!(&amp;#34;s2: {}&amp;#34;, s2); // 德国希特勒 </description>
    </item>
    
    <item>
      <title>关于我</title>
      <link>https://virgil-n.github.io/zh/page/about/</link>
      <pubDate>Fri, 27 May 2022 14:55:57 +0800</pubDate>
      
      <guid>https://virgil-n.github.io/zh/page/about/</guid>
      <description>爱看书、美剧、电影，热爱生活，关注互联网流行技术。</description>
    </item>
    
  </channel>
</rss>
